// === Expected M64 Go Test Cases ===
	// Test case for d = 1
	{
		d:        1,
		expected: M64{0x0000000000000000, 0x0000000000000000}, // M_128 = 0x100000000000000000000000000000000
	},
	// Test case for d = 1020
	{
		d:        1020,
		expected: M64{0x4040404040404041, 0x0040404040404040}, // M_128 = 0x00404040404040404040404040404041
	},
	// Test case for d = 4294967295
	{
		d:        4294967295,
		expected: M64{0x0000000100000002, 0x0000000100000001}, // M_128 = 0x00000001000000010000000100000002
	},
	// Test case for d = 9223372036854775807
	{
		d:        9223372036854775807,
		expected: M64{0x0000000000000005, 0x0000000000000002}, // M_128 = 0x00000000000000020000000000000005
	},
	// Test case for d = 18446744073709551615
	{
		d:        18446744073709551615,
		expected: M64{0x0000000000000002, 0x0000000000000001}, // M_128 = 0x00000000000000010000000000000002
	},
// === END M64 ===

// === Expected mul128_u64 Go Test Cases ===
	// Test case: 1*5
	{
		name:         "1*5",
		InputLowHi:   0x0000000000000000,
		InputLowLo:   0x0000000000000001,
		InputD:       0x0000000000000005,
		expectedHigh: 0x0000000000000000, // Product192 = 0x000000000000000000000000000000000000000000000005
	},
	// Test case: (1<<64)*5
	{
		name:         "(1<<64)*5",
		InputLowHi:   0x0000000000000001,
		InputLowLo:   0x0000000000000000,
		InputD:       0x0000000000000005,
		expectedHigh: 0x0000000000000000, // Product192 = 0x000000000000000000000000000000050000000000000000
	},
	// Test case: (2^64-1)*2
	{
		name:         "(2^64-1)*2",
		InputLowHi:   0x0000000000000000,
		InputLowLo:   0xffffffffffffffff,
		InputD:       0x0000000000000002,
		expectedHigh: 0x0000000000000000, // Product192 = 0x00000000000000000000000000000001fffffffffffffffe
	},
	// Test case: (2^63)*2
	{
		name:         "(2^63)*2",
		InputLowHi:   0x0000000000000000,
		InputLowLo:   0x8000000000000000,
		InputD:       0x0000000000000002,
		expectedHigh: 0x0000000000000000, // Product192 = 0x000000000000000000000000000000010000000000000000
	},
	// Test case: (2^64+2^63)*2
	{
		name:         "(2^64+2^63)*2",
		InputLowHi:   0x0000000000000001,
		InputLowLo:   0x8000000000000000,
		InputD:       0x0000000000000002,
		expectedHigh: 0x0000000000000000, // Product192 = 0x000000000000000000000000000000030000000000000000
	},
	// Test case: Large values
	{
		name:         "Large values",
		InputLowHi:   0xabcdef0123456789,
		InputLowLo:   0x9876543210fedcba,
		InputD:       0x1122334455667788,
		expectedHigh: 0x0b7fa0a0b41f260c, // Product192 = 0x0b7fa0a0b41f260cb0209e42846d85431ff714bd341bb8d0
	},
	// Test case: Max values
	{
		name:         "Max values",
		InputLowHi:   0xffffffffffffffff,
		InputLowLo:   0xffffffffffffffff,
		InputD:       0xffffffffffffffff,
		expectedHigh: 0xfffffffffffffffe, // Product192 = 0xfffffffffffffffeffffffffffffffff0000000000000001
	},
// === END mul128_u64 ===

// === Expected FastModU64 Go Test Cases ===
	// Test case for a = 0, d = 1020
	{
		InputA:      0,
		InputD:      1020,
		M:           M64{0x4040404040404041, 0x0040404040404040},
		ExpectedMod: 0, 
	},
	// Test case for a = 1, d = 1020
	{
		InputA:      1,
		InputD:      1020,
		M:           M64{0x4040404040404041, 0x0040404040404040},
		ExpectedMod: 1, 
	},
	// Test case for a = 1019, d = 1020
	{
		InputA:      1019,
		InputD:      1020,
		M:           M64{0x4040404040404041, 0x0040404040404040},
		ExpectedMod: 1019, 
	},
	// Test case for a = 1020, d = 1020
	{
		InputA:      1020,
		InputD:      1020,
		M:           M64{0x4040404040404041, 0x0040404040404040},
		ExpectedMod: 0, 
	},
	// Test case for a = 1021, d = 1020
	{
		InputA:      1021,
		InputD:      1020,
		M:           M64{0x4040404040404041, 0x0040404040404040},
		ExpectedMod: 1, 
	},
	// Test case for a = 33770903594394249, d = 1020
	{
		InputA:      33770903594394249,
		InputD:      1020,
		M:           M64{0x4040404040404041, 0x0040404040404040},
		ExpectedMod: 9, 
	},
	// Test case for a = 49276032860695964, d = 1020
	{
		InputA:      49276032860695964,
		InputD:      1020,
		M:           M64{0x4040404040404041, 0x0040404040404040},
		ExpectedMod: 224, 
	},
	// Test case for a = 0, d = 9223372036854775807
	{
		InputA:      0,
		InputD:      9223372036854775807,
		M:           M64{0x0000000000000005, 0x0000000000000002},
		ExpectedMod: 0, 
	},
	// Test case for a = 1234567890123456789, d = 9223372036854775807
	{
		InputA:      1234567890123456789,
		InputD:      9223372036854775807,
		M:           M64{0x0000000000000005, 0x0000000000000002},
		ExpectedMod: 1234567890123456789, 
	},
	// Test case for a = 9223372036854775806, d = 9223372036854775807
	{
		InputA:      9223372036854775806,
		InputD:      9223372036854775807,
		M:           M64{0x0000000000000005, 0x0000000000000002},
		ExpectedMod: 9223372036854775806, 
	},
	// Test case for a = 9223372036854775807, d = 9223372036854775807
	{
		InputA:      9223372036854775807,
		InputD:      9223372036854775807,
		M:           M64{0x0000000000000005, 0x0000000000000002},
		ExpectedMod: 0, 
	},
	// Test case for a = 9223372036854775808, d = 9223372036854775807
	{
		InputA:      9223372036854775808,
		InputD:      9223372036854775807,
		M:           M64{0x0000000000000005, 0x0000000000000002},
		ExpectedMod: 1, 
	},
	// Test case for a = 18446744073709551615, d = 9223372036854775807
	{
		InputA:      18446744073709551615,
		InputD:      9223372036854775807,
		M:           M64{0x0000000000000005, 0x0000000000000002},
		ExpectedMod: 1, 
	},
// === END FastModU64 ===
